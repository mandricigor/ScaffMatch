#!/bin/bash

WORKING_DIR=""
CONTIG_FILE=""
MAPPING="" # By default, we assume that read files are provided (and not mapping files)
INSERT_SIZE=""
FIRST_FILES=""
SECOND_FILES=""
LIBRARY_ORIENTATION=""
LIBRARY_STD_DEV=""
MATCHING_TYPE=""
BUNDLE_THRESHOLD=5
LOG_FILE=NONE

function show_help {
    echo "
ScaffMatch is a novel scaffolding tool based on Maximum-Weight Matching able to produce high-quality scaffolds from NGS data (reads and contigs). The tool is written in Python 2.7. It also includes a bash script wrapper that calls aligner in case one needs to first map reads to contigs (instead of providing .sam files).

The arguments accepted by ScaffMatch are:

  -w) Working directory -- this is the directory where ScaffMatch files are stored. These are .sam files produced after mapping reads to contigs and the resulting scaffolds file scaffolds.fa fasta file;

  -c) Contig fasta file;

  -m) Command line argument with no options. It is used when .sam files are used instead of reads .fastq files. Do not use this option if you provide reads files;

  -1) (Comma separated list of) either .fastq or .sam file(s) corresponding to the first read of the read pair;

  -2) (Comma separated list of) either .fastq or .sam file(s) corresponding to the second read of the read pair;

  -i) (Comma separated list of) insert size(s) of the library(-ies);

  -s) (Comma separated list of) library(-ies) standard deviation(s) of insert size(s);

  -p) (Comma separated list of) library(-ies) orientation (fr - innie, rf - outtie);

  -t) Bundle threshold. Pairs of contigs supported by number of read pairs less than the value of this argument are discarded. Optional
argument, by default it is equal to 5;

  -g) Matching heuristics: use max_weight for Maximum Weight Matching heuristics with the Insertion step, use backbone for Maximum Weight Matching heuristics without the Insertion step, use greedy for Greedy Matching heuristics;

  -l) Log file - where to store the logs. Optional argument. By default, stdout is used.

  -h) Display this message.
"
}


function show_hello {
    echo "HELLO! THIS IS SCAFFMATCH - NOVEL SCAFFOLDING TOOL DEVELOPPED BY IGOR MANDRIC AND ALEX ZELIKOVSKY AT GSU"
    echo
}

function join { local IFS="$1"; shift; echo "$*"; }



while getopts "h?:w:c:1:2:p:g:i:s:mt:l:" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    w)  WORKING_DIR=$OPTARG
        ;;
    c)  CONTIG_FILE=$OPTARG
        ;;
    p)  LIBRARY_ORIENTATION=$OPTARG
        ;;
    1)  FIRST_FILES=$OPTARG
        ;;
    2)  SECOND_FILES=$OPTARG
        ;;
    g)  MATCHING_TYPE=$OPTARG
        ;;
    i)  INSERT_SIZE=$OPTARG
        ;;
    s)  LIBRARY_STD_DEV=$OPTARG
        ;;
    m)  MAPPING=true
        ;;
    t)  BUNDLE_THRESHOLD=$OPTARG
        ;;
    l)  LOG_FILE=$OPTARG
        ;;
    esac
done


                                                                                                                                                        



#show_hello

# VALIDATE ARGUMENTS: CHECK FOR THE MANDATORY ONES IF THEY EXIST

if [ \( -z "$WORKING_DIR" \) -o \( -z "$CONTIG_FILE" \) -o \( -z "$FIRST_FILES" \) -o \( -z "$SECOND_FILES" \) -o \( -z "$INSERT_SIZE" \) -o \( -z "$LIBRARY_ORIENTATION" \) -o \( -z "$LIBRARY_STD_DEV" \) ]; then
    echo "Error: You missed some mandatory arguments. Please, indicate the following:"
    if [ -z "$WORKING_DIR" ]; then
        echo "    -w) scaffolding (working) directory;"
    fi
    if [ -z "$CONTIG_FILE" ]; then
        echo "    -c) contig fasta file;"
    fi
    if [ -z "$FIRST_FILES" ]; then
        echo "    -1) (comma separated list of) file(s) corresponding to the first read of the read pair;"
    fi
    if [ -z "$SECOND_FILES" ]; then
        echo "    -2) (comma separated list of) file(s) corresponding to the second read of the read pair;"
    fi
    if [ -z "$INSERT_SIZE" ]; then
        echo "    -i) (comma separated list of) insert size(s);"
    fi
    if [ -z "$LIBRARY_ORIENTATION" ]; then
        echo "    -p) (comma separated list of) library orientation(s);"
    fi
    if [ -z "$LIBRARY_STD_DEV" ]; then
        echo "    -s) (comma separated list of) library standard deviation(s);"
    fi
    echo "Run command 'scaffmatch -h' for detailed help."
    exit
fi


# VALIDATION OF THE ARGUMENTS:

# WORKING_DIR:

mkdir -p $WORKING_DIR

# CONTIG_FILE:

if [ ! -f "$CONTIG_FILE" ]; then
    echo "Error: Contig fasta file does not exist!"
    echo "Run command 'scaffmatch -h' for detailed help."
    exit
fi

# FIRST_FILES:

count1=0
IFS=',' read -ra MAPF <<< "$FIRST_FILES"
for i in "${MAPF[@]}"; do
    if [ ! -f "$i" ]; then
        echo "Error: File $i does not exist!"
        echo "Run command 'scaffmatch -h' for detailed help."
        exit
    fi
    count1=$(( count1 + 1 ))
done


# SECOND_FILES:

count2=0
IFS=',' read -ra MAPF <<< "$SECOND_FILES"
for i in "${MAPF[@]}"; do
    if [ ! -f "$i" ]; then
        echo "Error: File $i does not exist!"
        echo "Run command 'scaffmatch -h' for detailed help."
        exit
    fi
    count2=$(( count2 + 1 ))
done


# INSERT_SIZE:

count3=0
IFS=',' read -ra MAPF <<< "$INSERT_SIZE"
for i in "${MAPF[@]}"; do
    re='^[0-9]+$'
    if ! [[ "$i" =~ $re ]] ; then
       echo "Error: $i is not a number"
       echo "Run command 'scaffmatch -h' for detailed help."
       exit
    fi
    count3=$(( count3 + 1 ))
done


# LIBRARY_ORIENTATION:

count4=0
IFS=',' read -ra MAPF <<< "$LIBRARY_ORIENTATION"
for i in "${MAPF[@]}"; do
    if [ "$i" != "fr" ] && [ "$i" != "rf" ] ; then
       echo "Error: $i is not a correct orientation"
       echo "Run command 'scaffmatch -h' for detailed help."
       exit
    fi
    count4=$(( count4 + 1 ))
done



# LIBRARY_STD_DEV:

count5=0
IFS=',' read -ra MAPF <<< "$LIBRARY_STD_DEV"
for i in "${MAPF[@]}"; do
    re='^[0-9]+$'
    if ! [[ "$i" =~ $re ]] ; then
       echo "Error: $i is not a number"
       echo "Run command 'scaffmatch -h' for detailed help."
       exit
    fi
    count5=$(( count5 + 1 ))
done


# TEST IF ALL COUNTS ARE EQUAL: OTHERWISE WE HAVE INCONSISTENT PARAMETERS

st=0
for i in $count2 $count3 $count4 $count5; do
    [ "$count1" = "$i" ]
    st=$(( $? + st ))
done

if [ $st -eq 0 ]; then
    :
else 
    echo "Error: You have errors when providing parameters (the number of files (insert sizes, standard deviations) are not consistent)"
    echo "Run command 'scaffmatch -h' for detailed help."
    exit
fi



# MATCHING_TYPE

if [ -z "$MATCHING_TYPE" ]; then
    MATCHING_TYPE="max_weight"
fi


# WORKING DIRECTORY

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
SCAFFMATCH_DIR=""
SCAFFMATCH_SCRIPT="scaffmatch.py"


if [[ $DIR == *"ScaffMatch" ]]; then
    SCAFFMATCH_DIR="" # ScaffMatch is run from its root directory (supposedly)
else
    SCAFFMATCH_DIR="$DIR/ScaffMatch/" # ScaffMatch is run outside (supposedly, from /usr/bin)
fi


if [ ! -z "$MAPPING" ]; then
    # we have just mapping files: go ahead, run ScaffMatch
    echo "Running ScaffMatch"
    python2.7 $SCAFFMATCH_DIR$SCAFFMATCH_SCRIPT -w $WORKING_DIR -c $CONTIG_FILE -m1 $FIRST_FILES -m2 $SECOND_FILES -i $INSERT_SIZE -p $LIBRARY_ORIENTATION -s $LIBRARY_STD_DEV -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
fi



if [ -z "$MAPPING" ]; then
    NR_CPU=`cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1`
    INDEX_FILE=${WORKING_DIR%%/}/bowtie2_index
    IFS=',' read -ra MAPF <<< "$FIRST_FILES"
    LENGTH=${#MAPF[@]}
    if [ $LENGTH -lt 2 ]; then
        # we have one single library
        TMP1_FILE=${WORKING_DIR%%/}/tmp1.sam
        TMP2_FILE=${WORKING_DIR%%/}/tmp2.sam
        echo "Building the index"
        bowtie2-build -q -f $CONTIG_FILE $INDEX_FILE
        echo "Mapping the first read file"
        bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U $FIRST_FILES -S $TMP1_FILE
        echo "Mapping the second read file"
        bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U $SECOND_FILES -S $TMP2_FILE
        echo "Running ScaffMatch"
        python2.7 $SCAFFMATCH_DIR$SCAFFMATCH_SCRIPT -w $WORKING_DIR -c $CONTIG_FILE -m1 $TMP1_FILE -m2 $TMP2_FILE -i $INSERT_SIZE -p $LIBRARY_ORIENTATION -s $LIBRARY_STD_DEV -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
    else
        # this is the case of multiple libraries
        IFS=',' read -ra MAPF <<< "$FIRST_FILES"
        IFS=',' read -ra MAPS <<< "$SECOND_FILES"
        IFS=',' read -ra INSS <<< "$INSERT_SIZE"
        IFS=',' read -ra LIBO <<< "$LIBRARY_ORIENTATION"
        IFS=',' read -ra STDD <<< "$LIBRARY_STD_DEV"
        for i in $(seq 1 $LENGTH);
        do
            TMP1_FILE=${WORKING_DIR%%/}/tmp1.sam
            TMP2_FILE=${WORKING_DIR%%/}/tmp2.sam
            if [[ "$i" -eq 1 ]]; then
                echo "Building the index"
                bowtie2-build -q -f $CONTIG_FILE $INDEX_FILE
                echo "Mapping the first read file"
                bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U ${MAPF[0]} -S $TMP1_FILE
                echo "Mapping the second read file"
                bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U ${MAPS[0]} -S $TMP2_FILE
                echo "Running ScaffMatch"
                python2.7 $SCAFFMATCH_DIR$SCAFFMATCH_SCRIPT -w $WORKING_DIR -c $CONTIG_FILE -m1 $TMP1_FILE -m2 $TMP2_FILE -i ${INSS[0]} -p ${LIBO[0]} -s ${STDD[0]} -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
            else
                echo "Building the index"
                NEW_CONTIG_FILE=${WORKING_DIR%%/}/scaffolds.fa
                bowtie2-build -q -f $NEW_CONTIG_FILE $INDEX_FILE
                echo "Mapping the first read file"
                bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U ${MAPF[$(( $i - 1 ))]} -S $TMP1_FILE
                echo "Mapping the second read file"
                bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U ${MAPS[$(( $i - 1 ))]} -S $TMP2_FILE
                echo "Running ScaffMatch"
                python2.7 $SCAFFMATCH_DIR$SCAFFMATCH_SCRIPT -w $WORKING_DIR -c $NEW_CONTIG_FILE -m1 $TMP1_FILE -m2 $TMP2_FILE -i ${INSS[$(( $i - 1 ))]} -p ${LIBO[$(( $i - 1 ))]} -s ${STDD[$(( $i - 1 ))]} -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
            fi
        done
    fi
fi

