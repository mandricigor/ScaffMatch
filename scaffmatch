#!/bin/bash

WORKING_DIR=""
CONTIG_FILE=""
MAPPING_FILES=""
READ_FILES=""
INSERT_SIZE=""
LIBRARY_ORIENTATION=""
LIBRARY_STD_DEV=""
MATCHING_TYPE=""
BUNDLE_THRESHOLD=5
LOG_FILE=""


function show_help {
    echo "HERE A DETAILED HELP MUST BE PROVIDED"
}




while getopts "h?:w:c:p:g:i:s:m:r:t:" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    w)  WORKING_DIR=$OPTARG
        ;;
    c)  CONTIG_FILE=$OPTARG
        ;;
    p)  LIBRARY_ORIENTATION=$OPTARG
        ;;
    g)  MATCHING_TYPE=$OPTARG
        ;;
    i)  INSERT_SIZE=$OPTARG
        ;;
    s)  LIBRARY_STD_DEV=$OPTARG
        ;;
    m)  MAPPING_FILES=$OPTARG
        ;;
    r)  READ_FILES=$OPTARG
        ;;
    t)  BUNDLE_THRESHOLD=$OPTARG
        ;;
    esac
done


# PROVIDE EITHER READ FILES EITHER MAPPING FILES

if [ \( -z "$MAPPING_FILES" \) -a \( -z "$READ_FILES" \) ]; then
    echo "Please, provide either 2 read files, either 2 mapping (SAM) files: you provided none"
    exit
fi

if [ \( ! -z "$MAPPING_FILES" \) -a \( ! -z "$READ_FILES" \) ]; then
    echo "Please, provide either 2 read files, either 2 mapping (SAM) files: you provided both"
    exit
fi



# VALIDATE ARGUMENTS: CHECK FOR THE MANDATORY ONES

if [ \( -z "$WORKING_DIR" \) -o \( -z "$CONTIG_FILE" \) -o \( -z "$INSERT_SIZE" \) -o \( -z "$LIBRARY_ORIENTATION" \) -o \( -z "$LIBRARY_STD_DEV" \) ]; then
    echo "You missed some mandatory arguments. Please, indicate the following:"
    if [ -z "$WORKING_DIR" ]; then
        echo "    -w) working directory;"
    fi
    if [ -z "$CONTIG_FILE" ]; then
        echo "    -c) contigs file;"
    fi
    if [ -z "$INSERT_SIZE" ]; then
        echo "    -i) insert size;"
    fi
    if [ -z "$LIBRARY_ORIENTATION" ]; then
        echo "    -p) library orientation;"
    fi
    if [ -z "$LIBRARY_STD_DEV" ]; then
        echo "    -s) library standard deviation;"
    fi
    exit
fi


if [ -z "$MATCHING_TYPE" ]; then
    MATCHING_TYPE="max_weight"
fi



if [ ! -z "$MAPPING_FILES" ]; then
    # we have just mapping files: go ahead, run ScaffMatch
    declare -a MAPPINGS
    count=0
    IFS=',' read -ra MAPF <<< "$MAPPING_FILES"
    for i in "${MAPF[@]}"; do
        MAPPINGS[$count]="$i"
        count=$(( count + 1 ))
    done 
    echo "Running ScaffMatch"
    ./scaffmatch.py -w $WORKING_DIR -c $CONTIG_FILE -m1 ${MAPPINGS[0]} -m2 ${MAPPINGS[1]} -i $INSERT_SIZE -p $LIBRARY_ORIENTATION -s $LIBRARY_STD_DEV -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
fi



mkdir -p $WORKING_DIR

if [ ! -z "$READ_FILES" ]; then
    # we have just mapping files: go ahead, run ScaffMatch
    declare -a READINGS
    count=0
    IFS=',' read -ra READF <<< "$READ_FILES"
    for i in "${READF[@]}"; do
        READINGS[$count]="$i"
        count=$(( count + 1 ))
    done
    NR_CPU=`cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1`
    INDEX_FILE=${WORKING_DIR%%/}/bowtie2_index
    TMP1_FILE=${WORKING_DIR%%/}/tmp1.sam
    TMP2_FILE=${WORKING_DIR%%/}/tmp2.sam
    echo "Building the index"
    bowtie2-build -f $CONTIG_FILE $INDEX_FILE
    echo "Mapping the first file"
    bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U $READINGS[0] -S $TMP1_SAM
    echo "Mapping the second file"
    bowtie2 --quiet --no-hd --reorder -k 10 -q -p $NR_CPU -x $INDEX_FILE -U $READINGS[1] -S $TMP2_SAM
    echo "Running ScaffMatch"
    ./scaffmatch.py -w $WORKING_DIR -c $CONTIG_FILE -m1 $TMP1_SAM -m2 $TMP2_SAM -i $INSERT_SIZE -p $LIBRARY_ORIENTATION -s $LIBRARY_STD_DEV -g $MATCHING_TYPE -t $BUNDLE_THRESHOLD -l $LOG_FILE
fi


